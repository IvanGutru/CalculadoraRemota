#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'servicio_calculadora_types'

module Calculadodra
  class Client
    include ::Thrift::Client

    def Suma(primerNumero, segundoNumero)
      send_Suma(primerNumero, segundoNumero)
      return recv_Suma()
    end

    def send_Suma(primerNumero, segundoNumero)
      send_message('Suma', Suma_args, :primerNumero => primerNumero, :segundoNumero => segundoNumero)
    end

    def recv_Suma()
      result = receive_message(Suma_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'Suma failed: unknown result')
    end

    def Resta(primerNumero, segundoNumero)
      send_Resta(primerNumero, segundoNumero)
      return recv_Resta()
    end

    def send_Resta(primerNumero, segundoNumero)
      send_message('Resta', Resta_args, :primerNumero => primerNumero, :segundoNumero => segundoNumero)
    end

    def recv_Resta()
      result = receive_message(Resta_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'Resta failed: unknown result')
    end

    def Division(primerNumero, segundoNumero)
      send_Division(primerNumero, segundoNumero)
      return recv_Division()
    end

    def send_Division(primerNumero, segundoNumero)
      send_message('Division', Division_args, :primerNumero => primerNumero, :segundoNumero => segundoNumero)
    end

    def recv_Division()
      result = receive_message(Division_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'Division failed: unknown result')
    end

    def Multiplicacion(primerNumero, segundoNumero)
      send_Multiplicacion(primerNumero, segundoNumero)
      return recv_Multiplicacion()
    end

    def send_Multiplicacion(primerNumero, segundoNumero)
      send_message('Multiplicacion', Multiplicacion_args, :primerNumero => primerNumero, :segundoNumero => segundoNumero)
    end

    def recv_Multiplicacion()
      result = receive_message(Multiplicacion_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'Multiplicacion failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_Suma(seqid, iprot, oprot)
      args = read_args(iprot, Suma_args)
      result = Suma_result.new()
      result.success = @handler.Suma(args.primerNumero, args.segundoNumero)
      write_result(result, oprot, 'Suma', seqid)
    end

    def process_Resta(seqid, iprot, oprot)
      args = read_args(iprot, Resta_args)
      result = Resta_result.new()
      result.success = @handler.Resta(args.primerNumero, args.segundoNumero)
      write_result(result, oprot, 'Resta', seqid)
    end

    def process_Division(seqid, iprot, oprot)
      args = read_args(iprot, Division_args)
      result = Division_result.new()
      result.success = @handler.Division(args.primerNumero, args.segundoNumero)
      write_result(result, oprot, 'Division', seqid)
    end

    def process_Multiplicacion(seqid, iprot, oprot)
      args = read_args(iprot, Multiplicacion_args)
      result = Multiplicacion_result.new()
      result.success = @handler.Multiplicacion(args.primerNumero, args.segundoNumero)
      write_result(result, oprot, 'Multiplicacion', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class Suma_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PRIMERNUMERO = 1
    SEGUNDONUMERO = 2

    FIELDS = {
      PRIMERNUMERO => {:type => ::Thrift::Types::DOUBLE, :name => 'primerNumero'},
      SEGUNDONUMERO => {:type => ::Thrift::Types::DOUBLE, :name => 'segundoNumero'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Suma_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Resultado}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Resta_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PRIMERNUMERO = 1
    SEGUNDONUMERO = 2

    FIELDS = {
      PRIMERNUMERO => {:type => ::Thrift::Types::DOUBLE, :name => 'primerNumero'},
      SEGUNDONUMERO => {:type => ::Thrift::Types::DOUBLE, :name => 'segundoNumero'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Resta_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Resultado}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Division_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PRIMERNUMERO = 1
    SEGUNDONUMERO = 2

    FIELDS = {
      PRIMERNUMERO => {:type => ::Thrift::Types::DOUBLE, :name => 'primerNumero'},
      SEGUNDONUMERO => {:type => ::Thrift::Types::DOUBLE, :name => 'segundoNumero'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Division_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Resultado}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Multiplicacion_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PRIMERNUMERO = 1
    SEGUNDONUMERO = 2

    FIELDS = {
      PRIMERNUMERO => {:type => ::Thrift::Types::DOUBLE, :name => 'primerNumero'},
      SEGUNDONUMERO => {:type => ::Thrift::Types::DOUBLE, :name => 'segundoNumero'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Multiplicacion_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Resultado}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

